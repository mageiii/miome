#!/bin/python2.7
# -*- coding: UTF-8 -*-
import os
import getpass
import json
import sys

DOCKER_REGISTRY_VERSION = 'v2'
ipAddressInput = sys.argv[1]  # 搜索输入地址名称 eg: 10.0.0.0:5000/ ; 10.0.0.0:5000/redis
name_tag_space_num = 30  # 打印间隔空格个数
username = ''  # 用户名
passwd = ''  # 密码
repositories = []  # 仓库镜像列表
curl_connection_timeout = 5  # 查询超时时间单位：秒
ip = ipAddressInput.split("/", 1)[0]  # 仓库ip地址加端口号
repos_search_name = ''  # 搜索镜像名称

if len(ipAddressInput.split("/", 1)) == 2:
    repos_search_name = ipAddressInput.split("/", 1)[1]


def getReposArrayMaxLength(repositories):
    """
    获取名称列表中最长名称的长度。
    """
    maxLength = 0
    for repository in repositories:
        if len(repository) > maxLength:
            maxLength = len(repository)
    return maxLength

def genSearchRepositryCmd():
    """
    生成shell查询仓库所有镜像指令。
    """
    cmd = ("curl --connect-timeout " + str(curl_connection_timeout) + " -s -XGET http://" + ip + "/" +
           DOCKER_REGISTRY_VERSION + "/_catalog")
    if username != '':
        cmd += " -u" + username + ":" + passwd
    return cmd

def genSearchTagsCmd(repository):
    """
    生成shell查询指定镜像名称tag指令。
    """
    cmd = ("curl --connect-timeout " + str(curl_connection_timeout) + " -s -XGET http://" + ip + "/" +
           DOCKER_REGISTRY_VERSION + "/" + repository + "/tags/list")
    if username != '':
        cmd += " -u" + username + ":" + passwd
    return cmd

def parseReposJson(jsonstr):
    """
    转义json字符串为字典，如果需要用户密码则提示输入用户名誉密码。
    """
    try:
        _rep_json = json.loads(jsonstr)
    except ValueError:
        if jsonstr == '':
            print ip + ' connected failed,check your url'
        else:
            print "Response Json type incorrect"
        exit()
    if _rep_json.__contains__('errors'):
        errors_msg = _rep_json['errors']
        if errors_msg[0].__contains__('code') and errors_msg[0]['code'] == 'UNAUTHORIZED':
            global username
            global passwd
            username = raw_input("username:")
            passwd = getpass.getpass("password:")
            receive_repositry_json_p = os.popen(genSearchRepositryCmd()).read()
            ret_json = parseReposJson(receive_repositry_json_p)
            return ret_json
        else:
            print errors_msg[0]['message']
            exit()
    elif _rep_json.__contains__('repositories'):
        return _rep_json
    else:
        exit()


# Main程序
try:
    receive_repositry_json = os.popen(genSearchRepositryCmd()).read()
    reposjson = parseReposJson(receive_repositry_json)
    if repos_search_name == '':
        repositories = reposjson['repositories']
    else:
        reposTmpArray = reposjson['repositories']
        for repos in reposTmpArray:
            if repos.__contains__(repos_search_name):
                repositories.append(repos)
    name_tag_space_num += getReposArrayMaxLength(repositories)
    for i in range(0, len(repositories)):
        tagstr = os.popen(genSearchTagsCmd(repositories[i])).read()
        tagJson = json.loads(tagstr)
        if tagJson.__contains__('errors'):
            tagError = tagJson['errors']
            print tagError[0]['message']
            exit()
        tags = tagJson['tags']
        if i == 0:
            print "Name" + " " * (name_tag_space_num - 4) + "Tags"
        for x in range(0, len(tags)):
            print repositories[i] + " " * (name_tag_space_num - len(repositories[i])) + tags[x]
except KeyboardInterrupt:
    print '\r'
    exit()
